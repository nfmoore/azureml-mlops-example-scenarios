name: Deploy Model to Batch Endpoint

on:
  workflow_run:
    workflows:
      - Build Model
    types:
      - completed

jobs:
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    environment:
      name: Staging

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ vars.RESOURCE_GROUP }}
          workspace_name: mlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download artifacts
        uses: "./.github/templates/download-workflow-artifact"
        with:
          artifact_name: artifacts

      - name: Set model name and version
        run: |
          MODEL_NAME=$(jq --raw-output '.model_name' model.json)
          MODEL_VERSION=$(jq --raw-output '.model_version' model.json | bc -l)
          echo $MODEL_NAME $MODEL_VERSION
          echo "REGISTERED_MODEL=${MODEL_NAME}/versions/${MODEL_VERSION}" >> $GITHUB_ENV

      - name: Overwrite model parameter for deployment
        run: |
          yq -i '.model = "azureml://registries/mlr${{ vars.WORKLOAD_IDENTIFIER }}/models/${{ env.REGISTERED_MODEL }}"' core/endpoints/batch/deployment.yml
          cat core/endpoints/batch/deployment.yml

      - name: Create batch endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: batch
          endpoint_file: core/endpoints/batch/endpoint.yml
          endpoint_suffix: ${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}
          log_analytics_workspace_name: lawmlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

      - name: Create batch deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: batch
          deployment_file: core/endpoints/batch/deployment.yml
          endpoint_file: core/endpoints/batch/endpoint.yml
          endpoint_suffix: ${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

      - name: Set instrumentation key
        run: |
          INSTRUMENTATION_KEY=$(az resource show -g ${{ vars.RESOURCE_GROUP }} -n appi${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }} --resource-type "microsoft.insights/components" --query properties.InstrumentationKey | xargs)
          echo "INSTRUMENTATION_KEY=InstrumentationKey=${INSTRUMENTATION_KEY}" >> $GITHUB_ENV

      - name: Get drift enviroment from registry
        run: |
          ENVIRONMENT_NAME=$(yq '.name' < core/environments/drift.yml)
          ENVIRONMENT_VERSION=$(yq '.version' < core/environments/drift.yml)
          echo "ENVIRONMENT_DRIFT=${ENVIRONMENT_NAME}/versions/${ENVIRONMENT_VERSION}" >> $GITHUB_ENV

      - name: Overwrite parameters for data drift job
        run: |
          yq -i '.jobs.data_drift_step.environment_variables.APPLICATIONINSIGHTS_CONNECTION_STRING = "${{ env.INSTRUMENTATION_KEY }}"' core/jobs/pipelines/data_drift.yml
          yq -i '.jobs.data_drift_step.environment = "azureml://registries/mlr${{ vars.WORKLOAD_IDENTIFIER }}/environments/${{ env.ENVIRONMENT_DRIFT }}"' core/jobs/pipelines/data_drift.yml
          cat core/jobs/pipelines/data_drift.yml

      - name: Create data drift schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/jobs/schedules/data_drift.yml
          log_analytics_workspace_name: lawmlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: ${{ github.event.workflow_run.conclusion == 'success' }}

    environment:
      name: Production

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.workflow_run.head_branch }}

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ vars.RESOURCE_GROUP }}
          workspace_name: mlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download artifacts
        uses: "./.github/templates/download-workflow-artifact"
        with:
          artifact_name: artifacts

      - name: Set model name and version
        run: |
          MODEL_NAME=$(jq --raw-output '.model_name' model.json)
          MODEL_VERSION=$(jq --raw-output '.model_version' model.json | bc -l)
          echo $MODEL_NAME $MODEL_VERSION
          echo "REGISTERED_MODEL=${MODEL_NAME}/versions/${MODEL_VERSION}" >> $GITHUB_ENV

      - name: Overwrite model parameter for deployment
        run: |
          yq -i '.model = "azureml://registries/mlr${{ vars.WORKLOAD_IDENTIFIER }}/models/${{ env.REGISTERED_MODEL }}"' core/endpoints/batch/deployment.yml
          cat core/endpoints/batch/deployment.yml

      - name: Create batch endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: batch
          endpoint_file: core/endpoints/batch/endpoint.yml
          endpoint_suffix: ${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}
          log_analytics_workspace_name: lawmlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

      - name: Create batch deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: batch
          deployment_file: core/endpoints/batch/deployment.yml
          endpoint_file: core/endpoints/batch/endpoint.yml
          endpoint_suffix: ${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

      - name: Set instrumentation key
        run: |
          INSTRUMENTATION_KEY=$(az resource show -g ${{ vars.RESOURCE_GROUP }} -n appi${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }} --resource-type "microsoft.insights/components" --query properties.InstrumentationKey | xargs)
          echo "INSTRUMENTATION_KEY=InstrumentationKey=${INSTRUMENTATION_KEY}" >> $GITHUB_ENV

      - name: Get drift enviroment from registry
        run: |
          ENVIRONMENT_NAME=$(yq '.name' < core/environments/drift.yml)
          ENVIRONMENT_VERSION=$(yq '.version' < core/environments/drift.yml)
          echo "ENVIRONMENT_DRIFT=${ENVIRONMENT_NAME}/versions/${ENVIRONMENT_VERSION}" >> $GITHUB_ENV

      - name: Overwrite parameters for data drift job
        run: |
          yq -i '.jobs.data_drift_step.environment_variables.APPLICATIONINSIGHTS_CONNECTION_STRING = "${{ env.INSTRUMENTATION_KEY }}"' core/jobs/pipelines/data_drift.yml
          yq -i '.jobs.data_drift_step.environment = "azureml://registries/mlr${{ vars.WORKLOAD_IDENTIFIER }}/environments/${{ env.ENVIRONMENT_DRIFT }}"' core/jobs/pipelines/data_drift.yml
          cat core/jobs/pipelines/data_drift.yml

      - name: Create data drift schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/jobs/schedules/data_drift.yml
          log_analytics_workspace_name: lawmlw${{ vars.WORKLOAD_IDENTIFIER }}${{ vars.RESOURCE_INSTANCE }}

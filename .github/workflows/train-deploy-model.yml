name: Train and Deploy Model

on:
  workflow_dispatch: # For demonstration purposes

  # push: # Runs workflow when you push a commit or tag
  #   branches:
  #     - main

  # schedule: # Runs workflow at a scheduled time.
  #   - cron: "0 0 * * 0"

jobs:
  create-model-staging:
    name: Create Model in Staging
    runs-on: ubuntu-latest

    environment:
      name: Staging

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ secrets.RESOURCE_GROUP }}
          workspace_name: ${{ secrets.WORKSPACE_NAME }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Run pipeline job to train model
        uses: "./.github/templates/run-job"
        with:
          job_file: core/pipelines/train_model.yml

      - name: Tag and download model
        run: |
          MODEL_NAME=$(yq '.jobs.register_step.inputs.model_name' < core/pipelines/train_model.yml)
          MODEL_VERSION=$(az ml model list --name $MODEL_NAME --query "[0].version" | bc -l)

          az ml model update --name $MODEL_NAME --version $MODEL_VERSION \
            --set tags.github_run_id=${{ github.run_id }} tags.github_workflow_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

          az ml model download --name $MODEL_NAME --version $MODEL_VERSION --download-path model-artifact
          echo '{"model_name":"'"$MODEL_NAME"'","model_version":"'"$MODEL_VERSION"'"}' > model-artifact/model.json

      - name: Upload model artifact
        uses: actions/upload-artifact@v2
        with:
          name: model-artifact
          path: model-artifact

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: create-model-staging

    environment:
      name: Staging

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ secrets.RESOURCE_GROUP }}
          workspace_name: ${{ secrets.WORKSPACE_NAME }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create online endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: online
          endpoint_file: core/deploy/online/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Create batch endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: batch
          endpoint_file: core/deploy/batch/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Create online deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: online
          deployment_file: core/deploy/online/deployment.yml
          endpoint_file: core/deploy/online/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}

      - name: Create batch deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: batch
          deployment_file: core/deploy/batch/deployment.yml
          endpoint_file: core/deploy/batch/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}

      - name: Add variables to data export job specification
        shell: bash
        run: |
          export MODEL_NAME=$(yq '.jobs.register_step.inputs.model_name' < core/pipelines/train_model.yml)
          export MODEL_VERSION=$(az ml model list --name $MODEL_NAME --query "[0].version" | bc -l)
          export LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show --workspace-name ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }} | jq --raw-output '.customerId')

          envsubst '$MODEL_NAME:$MODEL_VERSION:$LOG_ANALYTICS_WORKSPACE_ID' < core/pipelines/data_export.yml > core/pipelines/temp_data_export.yml
          cp core/pipelines/temp_data_export.yml core/pipelines/data_export.yml

      - name: Create data export schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/schedules/data_export.yml
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Add variables to data drift job specification
        shell: bash
        run: |
          export INSTRUMENTATION_KEY=$(az resource show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.APPLICATION_INSIGHTS_NAME }} --resource-type "microsoft.insights/components" --query properties.InstrumentationKey | xargs)

          envsubst '$INSTRUMENTATION_KEY' < core/pipelines/data_drift.yml > core/pipelines/temp_data_drift.yml
          cp core/pipelines/temp_data_drift.yml core/pipelines/data_drift.yml

      - name: Create data drift schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/schedules/data_drift.yml
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

  end-to-end-testing:
    name: End to End Testing
    runs-on: ubuntu-latest
    needs: deploy-staging

    environment:
      name: Staging

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ secrets.RESOURCE_GROUP }}
          workspace_name: ${{ secrets.WORKSPACE_NAME }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Invoke online endpoint
        run: |
          ENDPOINT_NAME=$(yq '.name' < core/deploy/online/endpoint.yml)-${{ secrets.ENDPOINT_SUFFIX }}
          DEPLOYMENT_NAME=$(yq '.name' < core/deploy/online/deployment.yml)
          echo $ENDPOINT_NAME $DEPLOYMENT_NAME

          az ml online-endpoint invoke --name $ENDPOINT_NAME --deployment $DEPLOYMENT_NAME --request-file core/deploy/online/sample.json

      - name: Send all traffic to deployment
        run: |
          ENDPOINT_NAME=$(yq '.name' < core/deploy/online/endpoint.yml)-${{ secrets.ENDPOINT_SUFFIX }}
          DEPLOYMENT_NAME=$(yq '.name' < core/deploy/online/deployment.yml)
          echo $ENDPOINT_NAME $DEPLOYMENT_NAME

          az ml online-endpoint update --name $ENDPOINT_NAME --traffic "$DEPLOYMENT_NAME=100"

  upload-model-production:
    name: Upload Model to Production
    runs-on: ubuntu-latest
    needs: end-to-end-testing

    environment:
      name: Production

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ secrets.RESOURCE_GROUP }}
          workspace_name: ${{ secrets.WORKSPACE_NAME }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Download model artifact
        uses: actions/download-artifact@v2
        with:
          name: model-artifact

      - name: Upload and tag model
        run: |
          MODEL_NAME=$(yq '.jobs.register_step.inputs.model_name' < core/pipelines/train_model.yml)
          MODEL_VERSION=$(jq --raw-output '.model_version' model.json | bc -l)

          az ml model create --name $MODEL_NAME --version $MODEL_VERSION --path $MODEL_NAME/model --type mlflow_model
          az ml model update --name $MODEL_NAME --version $MODEL_VERSION \
            --set tags.github_run_id=${{ github.run_id }} tags.github_workflow_url="https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: upload-model-production

    environment:
      name: Production

    defaults:
      run:
        shell: bash -l {0}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v2

      - name: Install dependencies
        uses: "./.github/templates/install-dependencies"
        with:
          workspace_resource_group: ${{ secrets.RESOURCE_GROUP }}
          workspace_name: ${{ secrets.WORKSPACE_NAME }}
          azure_credentials: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Create online endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: online
          endpoint_file: core/deploy/online/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Create batch endpoint
        uses: "./.github/templates/create-endpoint"
        with:
          endpoint_type: batch
          endpoint_file: core/deploy/batch/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Create online deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: online
          deployment_file: core/deploy/online/deployment.yml
          endpoint_file: core/deploy/online/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}

      - name: Create batch deployment
        uses: "./.github/templates/create-deployment"
        with:
          deployment_type: batch
          deployment_file: core/deploy/batch/deployment.yml
          endpoint_file: core/deploy/batch/endpoint.yml
          endpoint_suffix: ${{ secrets.ENDPOINT_SUFFIX }}

      - name: Send all traffic to deployment
        run: |
          ENDPOINT_NAME=$(yq '.name' < core/deploy/online/endpoint.yml)-${{ secrets.ENDPOINT_SUFFIX }}
          DEPLOYMENT_NAME=$(yq '.name' < core/deploy/online/deployment.yml)
          echo $ENDPOINT_NAME $DEPLOYMENT_NAME

          az ml online-endpoint update --name $ENDPOINT_NAME --traffic "$DEPLOYMENT_NAME=100"

      - name: Add variables to data export job specification
        shell: bash
        run: |
          export MODEL_NAME=$(yq '.jobs.register_step.inputs.model_name' < core/pipelines/train_model.yml)
          export MODEL_VERSION=$(az ml model list --name $MODEL_NAME --query "[0].version" | bc -l)
          export LOG_ANALYTICS_WORKSPACE_ID=$(az monitor log-analytics workspace show --workspace-name ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }} | jq --raw-output '.customerId')

          envsubst '$MODEL_NAME:$MODEL_VERSION:$LOG_ANALYTICS_WORKSPACE_ID' < core/pipelines/data_export.yml > core/pipelines/temp_data_export.yml
          cp core/pipelines/temp_data_export.yml core/pipelines/data_export.yml

      - name: Create data export schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/schedules/data_export.yml
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}

      - name: Add variables to data drift job specification
        shell: bash
        run: |
          export INSTRUMENTATION_KEY=$(az resource show -g ${{ secrets.RESOURCE_GROUP }} -n ${{ secrets.APPLICATION_INSIGHTS_NAME }} --resource-type "microsoft.insights/components" --query properties.InstrumentationKey | xargs)

          envsubst '$INSTRUMENTATION_KEY' < core/pipelines/data_drift.yml > core/pipelines/temp_data_drift.yml
          cp core/pipelines/temp_data_drift.yml core/pipelines/data_drift.yml

      - name: Create data drift schedule
        uses: "./.github/templates/schedule-job"
        with:
          schedule_file: core/schedules/data_drift.yml
          log_analytics_workspace_name: ${{ secrets.LOG_ANALYTICS_WORKSPACE_NAME }}
